package uprm.icom5016.daos;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;


import uprm.icom5016.dtos.Checkout;
import uprm.icom5016.dtos.Product;


public class CheckoutDAO {


	private static final String ADD_ORDER = "insert into orders(dateorder,ccnumber,username,total) values (?,?,?,CAST ((?) AS money))";
	private static final String ADD_TO_ORDER = "insert into addtoorder(pid,pquantity,orderid,price) values (?,CAST ((?) AS numeric),CAST ((?) AS numeric),CAST ((?) AS money))";
	private static final String UPDATE_STOCK = "UPDATE products set stock = (CAST ((?) AS numeric) - CAST ((?) AS numeric)) WHERE pid = replace1 returning pid";

	public CheckoutStatus processCheckout(Checkout checkout)
			throws DataSourceException {
		Connection conn = null;
		try {
			// first determine if student is valid
			conn = DataSource.getInstance().getJDBCConnection();
			conn.setAutoCommit(false);
			PreparedStatement stmt = conn.prepareStatement(ADD_ORDER,Statement.RETURN_GENERATED_KEYS);
			Date x = new Date(java.util.GregorianCalendar.getInstance().getTimeInMillis());
			stmt.setDate(1, x);
			stmt.setString(2, checkout.getCcard().getCcnumber());
			stmt.setString(3, checkout.getUser().getUserName());
			Double t = 0.00;
			for(int i=0;i<checkout.getProducts().size();i++){
				t = t + Double.parseDouble(checkout.getProducts().get(i).getPrice().substring(1)) * checkout.getQuantity().get(i);
			}
			DecimalFormat twoDForm = new DecimalFormat("#.##");
			Double total= Double.valueOf(twoDForm.format(t));
			stmt.setString(4,""+total);
			int status = stmt.executeUpdate();
			if (status != 1){
				throw new SQLException("Insert row count was not one.");
			}
			// Now get the autogenerated keys
			ResultSet rs = stmt.getGeneratedKeys();
			if (rs.next()){
				// OK, so now get the newly generated pid

				// use this value to make a second insert,
				// this time to table projectmember

				for(int i=0;i<checkout.getProducts().size();i++){
					stmt = conn.prepareStatement(ADD_TO_ORDER,Statement.RETURN_GENERATED_KEYS);
					stmt.setString(1, checkout.getProducts().get(i).getPid());
					stmt.setString(2, ""+checkout.getQuantity().get(i));
					stmt.setString(3, rs.getString(1));
					stmt.setString(4, checkout.getProducts().get(i).getPrice().substring(1));
					status = stmt.executeUpdate();
					if (status != 1){
						// Something is wrong, second insert failed, so abort whole transaction
						// Roll back the transaction and set the auto-commit behavior back.
						try {
							conn.rollback();
							conn.setAutoCommit(true);
						}
						catch(SQLException e){
						}
						throw new SQLException("Unable to get autogenered Keys");
					}
					String y = UPDATE_STOCK;
					y = y.replace("replace1", "\'"+checkout.getProducts().get(i).getPid()+"\'");
					PreparedStatement stmt2 = conn.prepareStatement(y);
					stmt2.setInt(1, checkout.getProducts().get(i).getStock());
					stmt2.setInt(2, checkout.getQuantity().get(i));
					rs = stmt2.executeQuery();
					if (!rs.next()){
						// Something is wrong, second insert failed, so abort whole transaction
						// Roll back the transaction and set the auto-commit behavior back.
						try {
							conn.rollback();
							conn.setAutoCommit(true);
						}
						catch(SQLException e){
						}
						throw new SQLException("Unable to get autogenered Keys");
					}

				}

				try {
					conn.commit();
				}
				catch(SQLException e){
					// Ops! Very last minute error. Abort
					try {
						conn.rollback();
						conn.setAutoCommit(true);
					}
					catch(SQLException e2){

					}
					throw new SQLException("Unable to commit transaction.", e);
				}
				// Set the auto-commit behavior back.
				try {
					conn.setAutoCommit(true);
				}
				catch(SQLException e){

				}
				// We are done!
				return CheckoutStatus.OK;

			}
			else {
				// Something is wrong because we could not get the project id
				// Roll back the transaction and set the auto-commit behavior back.
				try {
					conn.rollback();
					conn.setAutoCommit(true);
				}
				catch(SQLException e){		
				}
				throw new SQLException("Cannot get autogenerated values.");
			}
		}
		catch(Exception e){
			throw new DataSourceException("Unable to insert data from data source. ", e);
		}
		finally {
			if (conn != null){
				try {
					conn.close();
				}
				catch(Exception e2){
					
				}
			}
		}

	}





}
